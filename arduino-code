#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7789.h> // Hardware-specific library for ST7789
#include <SPI.h>             // Arduino SPI library
#include <Fonts/FreeSansBold12pt7b.h>
 
// ST7789 TFT module connections
#define TFT_CS     10
#define TFT_RST    8  // define reset pin, or set to -1 and connect to Arduino RESET pin
#define TFT_DC     9  // define data/command pin
 
// Initialize Adafruit ST7789 TFT library
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);

float p = 3.1415;

int pos_y = 76;
int selec = 0;
int menu = 0;
 
void setup(void) {
  pinMode(2, INPUT_PULLUP);
  pinMode(3, INPUT_PULLUP);
  pinMode(4, INPUT_PULLUP);
  pinMode(5, INPUT_PULLUP);
  
  Serial.begin(9600);
  Serial.print(F("Hello! ST7789 TFT Test"));
 
  // if the display has CS pin try with SPI_MODE0
  tft.init(240, 240, SPI_MODE2);    // Init ST7789 display 240x240 pixel
  // if the screen is flipped, remove this command
  tft.setRotation(2);
  Serial.println(F("Initialized"));
  uint16_t time = millis();
  time = millis() - time;
  delay(500);

 /*
  // large block of text
  tft.fillScreen(ST77XX_BLACK);
  testdrawtext("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur adipiscing ante sed nibh tincidunt feugiat. Maecenas enim massa, fringilla sed malesuada et, malesuada sit amet turpis. Sed porttitor neque ut ante pretium vitae malesuada nunc bibendum. Nullam aliquet ultrices massa eu hendrerit. Ut sed nisi lorem. In vestibulum purus a tortor imperdiet posuere. ", ST77XX_WHITE);
  delay(1000);
 
  // tft print function!
  tftPrintTest();
  delay(4000);
 
  // a single pixel
  tft.drawPixel(tft.width()/2, tft.height()/2, ST77XX_GREEN);
  delay(500);
 
  // line draw test
  testlines(ST77XX_YELLOW);
  delay(500);
 
  // optimized lines
  testfastlines(ST77XX_RED, ST77XX_BLUE);
  delay(500);
 
  testdrawrects(ST77XX_GREEN);
  delay(500);
 
  testfillrects(ST77XX_YELLOW, ST77XX_MAGENTA);
  delay(500);
 
  tft.fillScreen(ST77XX_BLACK);
  testfillcircles(10, ST77XX_BLUE);
  testdrawcircles(10, ST77XX_WHITE);
  delay(500);
 
  testroundrects();
  delay(500);
 
  testtriangles();
  delay(500);
 
  mediabuttons();
  delay(500);
  */

  tft.fillScreen(ST77XX_BLACK);
 
  Serial.println("done");
  delay(1000);
}
 
void loop() {
  if(menu == 0)
  {
    drawMenu();
   
    if(!digitalRead(3))
    {
      if(selec < 3)
      {
        pos_y += 26;
        selec++; 
      }
      delay(60);
    }

    if(!digitalRead(2))
    {
      if(selec > 0)
      {
        pos_y -= 26;
        selec--;
      }
      delay(60);
    }
  }
  else
  {
     switch(selec)
     {
       case 0:
         drawJogar();
         break;
    /*
       case 1:
         drawRanking(players);
         break;

       case 2:
         drawCreditos(y);
         break;
    
       case 3:
         drawSair();
         break;
*/
       default:
         menu = 0;
         break;
     }
  }

  if(!digitalRead(4))
  {
    menu = 1;
    tft.fillScreen(ST77XX_BLACK);
  }

  if(!digitalRead(5))
  {
    menu = 0;
    tft.fillScreen(ST77XX_BLACK);
  }
}

void drawMenu()
{
  tft.setTextWrap(false);   //Nao vai ter quebra de linha
  tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);  //Faz a borda em branco com 1 pixel de distancia da beirada do display
  tft.setCursor(36, 35);  //y = 30  //Determina a posição do cursor
  tft.setTextColor(ST77XX_GREEN);
  tft.setTextSize(1); //Tamanho da fonte
  tft.setFont(&FreeSansBold12pt7b);   //22p altura
  tft.println("Nibirus Attack");
  tft.setFont(NULL);  //Retorna para a fonte padrão
  tft.setTextSize(2);
  tft.setCursor(36, 76);  //y = 76
  tft.print("Jogar");
  tft.setCursor(36, 102);
  tft.print("Ranking");
  tft.setCursor(36, 128);
  tft.print("Creditos");
  tft.setCursor(36, 154);
  tft.print("Sair");

  switch(selec)
  {
    case 0:
      tft.setCursor(20, 76);
      tft.print(">");
      tft.setTextColor(ST77XX_BLACK);
      tft.setCursor(20, 102);
      tft.print(">");
      tft.setCursor(20, 128);
      tft.print(">");
      tft.setCursor(20, 154);
      tft.print(">");
      tft.setTextColor(ST77XX_GREEN);
      break;
    
    case 1:
      tft.setCursor(20, 102);
      tft.print(">");
      tft.setTextColor(ST77XX_BLACK);
      tft.setCursor(20, 76);
      tft.print(">");
      tft.setCursor(20, 128);
      tft.print(">");
      tft.setCursor(20, 154);
      tft.print(">");
      tft.setTextColor(ST77XX_GREEN);
      break;
    
    case 2:
      tft.setCursor(20, 128);
      tft.print(">");
      tft.setTextColor(ST77XX_BLACK);
      tft.setCursor(20, 102);
      tft.print(">");
      tft.setCursor(20, 76);
      tft.print(">");
      tft.setCursor(20, 154);
      tft.print(">");
      tft.setTextColor(ST77XX_GREEN);
      break;

    case 3:
      tft.setCursor(20, 154);
      tft.print(">");
      tft.setTextColor(ST77XX_BLACK);
      tft.setCursor(20, 102);
      tft.print(">");
      tft.setCursor(20, 128);
      tft.print(">");
      tft.setCursor(20, 76);
      tft.print(">");
      tft.setTextColor(ST77XX_GREEN);
      break;
  }
}

void drawJogar()
{
  tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);  //Faz a borda em branco com 1 pixel de distancia da beirada do display
  tft.setTextColor(ST77XX_RED);
  tft.setCursor(30, tft.height()/2);
  tft.print("Em Construcao!");
}
/*
void drawRanking(rank players[])
{
  int i, x, y=28;
  u8g.drawFrame(1,10,125,52);
  u8g.setFont(u8g_font_6x10);
  for(i=0; i<3; i++)
  {
    x = 30;
    u8g.setPrintPos(30, y);
    u8g.print(players[i].nome);
    x += 50;
    u8g.setPrintPos(x, y);
    u8g.print(players[i].pontos);
    y += 10;
  }
}

void drawCreditos(int y)
{
  y += 19;

  u8g.drawFrame(1,10,125,52);
  u8g.setFont(u8g_font_6x10);
  if(y<62)
  {
    u8g.drawStr(15, y, "Desenvolvedores:");
  }
  y += 10;
  if(y<62)
  {
    u8g.drawStr(30, y, "Dany");
  }
  y += 10;
  if(y<62)
  {
    u8g.drawStr(30, y, "Andre");
  }
  y += 10;
  if(y<62)
  {
    u8g.drawStr(30, y, "Josue");
  }
  y += 10;
  if(y<62)
  {
    u8g.drawStr(30, y, "Hamada");
  }
}

void drawSair()
{
  u8g.drawFrame(1,10,125,52);
  u8g.setFont(u8g_font_6x13B);
  u8g.drawStr(25, 40, "Saindo...");
}

/*void testlines(uint16_t color) {
  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x=0; x < tft.width(); x+=6) {
    tft.drawLine(0, 0, x, tft.height()-1, color);
    delay(0);
  }
  for (int16_t y=0; y < tft.height(); y+=6) {
    tft.drawLine(0, 0, tft.width()-1, y, color);
    delay(0);
  }
 
  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x=0; x < tft.width(); x+=6) {
    tft.drawLine(tft.width()-1, 0, x, tft.height()-1, color);
    delay(0);
  }
  for (int16_t y=0; y < tft.height(); y+=6) {
    tft.drawLine(tft.width()-1, 0, 0, y, color);
    delay(0);
  }
 
  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x=0; x < tft.width(); x+=6) {
    tft.drawLine(0, tft.height()-1, x, 0, color);
    delay(0);
  }
  for (int16_t y=0; y < tft.height(); y+=6) {
    tft.drawLine(0, tft.height()-1, tft.width()-1, y, color);
    delay(0);
  }
 
  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x=0; x < tft.width(); x+=6) {
    tft.drawLine(tft.width()-1, tft.height()-1, x, 0, color);
    delay(0);
  }
  for (int16_t y=0; y < tft.height(); y+=6) {
    tft.drawLine(tft.width()-1, tft.height()-1, 0, y, color);
    delay(0);
  }
}
 
void testdrawtext(char *text, uint16_t color) {
  tft.setCursor(0, 0);
  tft.setTextColor(color);
  tft.setTextWrap(true);
  tft.print(text);
}
 
void testfastlines(uint16_t color1, uint16_t color2) {
  tft.fillScreen(ST77XX_BLACK);
  for (int16_t y=0; y < tft.height(); y+=5) {
    tft.drawFastHLine(0, y, tft.width(), color1);
  }
  for (int16_t x=0; x < tft.width(); x+=5) {
    tft.drawFastVLine(x, 0, tft.height(), color2);
  }
}
 
void testdrawrects(uint16_t color) {
  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x=0; x < tft.width(); x+=6) {
    tft.drawRect(tft.width()/2 -x/2, tft.height()/2 -x/2 , x, x, color);
  }
}
 
void testfillrects(uint16_t color1, uint16_t color2) {
  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x=tft.width()-1; x > 6; x-=6) {
    tft.fillRect(tft.width()/2 -x/2, tft.height()/2 -x/2 , x, x, color1);
    tft.drawRect(tft.width()/2 -x/2, tft.height()/2 -x/2 , x, x, color2);
  }
}
 
void testfillcircles(uint8_t radius, uint16_t color) {
  for (int16_t x=radius; x < tft.width(); x+=radius*2) {
    for (int16_t y=radius; y < tft.height(); y+=radius*2) {
      tft.fillCircle(x, y, radius, color);
    }
  }
}
 
void testdrawcircles(uint8_t radius, uint16_t color) {
  for (int16_t x=0; x < tft.width()+radius; x+=radius*2) {
    for (int16_t y=0; y < tft.height()+radius; y+=radius*2) {
      tft.drawCircle(x, y, radius, color);
    }
  }
}
 
void testtriangles() {
  tft.fillScreen(ST77XX_BLACK);
  int color = 0xF800;
  int t;
  int w = tft.width()/2;
  int x = tft.height()-1;
  int y = 0;
  int z = tft.width();
  for(t = 0 ; t <= 15; t++) {
    tft.drawTriangle(w, y, y, x, z, x, color);
    x-=4;
    y+=4;
    z-=4;
    color+=100;
  }
}
 
void testroundrects() {
  tft.fillScreen(ST77XX_BLACK);
  int color = 100;
  int i;
  int t;
  for(t = 0 ; t <= 4; t+=1) {
    int x = 0;
    int y = 0;
    int w = tft.width()-2;
    int h = tft.height()-2;
    for(i = 0 ; i <= 16; i+=1) {
      tft.drawRoundRect(x, y, w, h, 5, color);
      x+=2;
      y+=3;
      w-=4;
      h-=6;
      color+=1100;
    }
    color+=100;
  }
}
 
void tftPrintTest() {
  tft.setTextWrap(false);
  tft.fillScreen(ST77XX_BLACK);
  tft.setCursor(0, 30);
  tft.setTextColor(ST77XX_RED);
  tft.setTextSize(1);
  tft.println("Hello World!");
  tft.setTextColor(ST77XX_YELLOW);
  tft.setTextSize(2);
  tft.println("Hello World!");
  tft.setTextColor(ST77XX_GREEN);
  tft.setTextSize(3);
  tft.println("Hello World!");
  tft.setTextColor(ST77XX_BLUE);
  tft.setTextSize(4);
  tft.print(1234.567);
  delay(1500);
  tft.setCursor(0, 0);
  tft.fillScreen(ST77XX_BLACK);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(0);
  tft.println("Hello World!");
  tft.setTextSize(1);
  tft.setTextColor(ST77XX_GREEN);
  tft.print(p, 6);
  tft.println(" Want pi?");
  tft.println(" ");
  tft.print(8675309, HEX); // print 8,675,309 out in HEX!
  tft.println(" Print HEX!");
  tft.println(" ");
  tft.setTextColor(ST77XX_WHITE);
  tft.println("Sketch has been");
  tft.println("running for: ");
  tft.setTextColor(ST77XX_MAGENTA);
  tft.print(millis() / 1000);
  tft.setTextColor(ST77XX_WHITE);
  tft.print(" seconds.");
}
 
void mediabuttons() {
  // play
  tft.fillScreen(ST77XX_BLACK);
  tft.fillRoundRect(25, 10, 78, 60, 8, ST77XX_WHITE);
  tft.fillTriangle(42, 20, 42, 60, 90, 40, ST77XX_RED);
  delay(500);
  // pause
  tft.fillRoundRect(25, 90, 78, 60, 8, ST77XX_WHITE);
  tft.fillRoundRect(39, 98, 20, 45, 5, ST77XX_GREEN);
  tft.fillRoundRect(69, 98, 20, 45, 5, ST77XX_GREEN);
  delay(500);
  // play color
  tft.fillTriangle(42, 20, 42, 60, 90, 40, ST77XX_BLUE);
  delay(50);
  // pause color
  tft.fillRoundRect(39, 98, 20, 45, 5, ST77XX_RED);
  tft.fillRoundRect(69, 98, 20, 45, 5, ST77XX_RED);
  // play color
  tft.fillTriangle(42, 20, 42, 60, 90, 40, ST77XX_GREEN);
}
*/
